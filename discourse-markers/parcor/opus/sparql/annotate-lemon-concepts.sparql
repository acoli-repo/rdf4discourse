# match dimlex:writtenRep against conll:WORD to retrieve lexical concept annotations 
# presuppose a lemon model has been loaded into the graph <http://www.w3.org/ns/lemon/ontolex> (ALWAYS!)
# create properties conll:LEX_ENTRY, conll:LEX_FORM, conll:LEX_SENSE, conll:LEX_CONCEPT, individually for every nif:Word
# note: presupposes untyped literals
# note that we may generate more than one object per word
# note that we may double-annotate non-initial elements of complex connectors, e.g., German "und zwar": annotate "und zwar" on "und", but also "zwar" on "zwar"; we only suppress annotation of "und"
# note: n:1 matches are *SLOW*

PREFIX ontolex: <http://www.w3.org/ns/lemon/ontolex#>
PREFIX synsem: <http://www.w3.org/ns/lemon/synsem#>
PREFIX decomp: <http://www.w3.org/ns/lemon/decomp#>
PREFIX vartrans: <http://www.w3.org/ns/lemon/vartrans#>
PREFIX lime: <http://www.w3.org/ns/lemon/lime#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xml: <http://www.w3.org/TR/xml/#>
prefix conll: <http://ufal.mff.cuni.cz/conll2009-st/task-description.html#>
prefix nif:   <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#>

# n:1 exact matches, annotate at the first word
INSERT {
	?word conll:LEX_ENTRY ?entry; 
		  conll:LEX_FORM ?canonicalForm; 
		  conll:LEX_SENSE ?sense; 
		  conll:LEX_CONCEPT ?concept.
} WHERE {
	GRAPH <http://www.w3.org/ns/lemon/ontolex> {
		?entry (ontolex:canonicalForm|ontolex:otherForm|ontolex:lexicalForm)/ontolex:writtenRep ?form.
		FILTER(contains(?form,' '))
		{ 
			?entry ontolex:canonicalForm/ontolex:writtenRep ?canonicalForm 
		} UNION {
			?entry ontolex:lexicalForm/ontolex:writtenRep ?form
			FILTER(NOT EXISTS { ?entry ontolex:canonicalForm [] })
			BIND(?form AS ?canonicalForm)
		}
		?entry ontolex:sense|^ontolex:isSenseOf ?sense.
		OPTIONAL { ?sense ontolex:isLexicalizedSenseOf|^ontolex:lexicalizedSense ?concept.}
	}
	?word conll:WORD ?wform.
	FILTER(strstarts(?form,?wform))
	FILTER(?form!=?wform)	# that would be a 1:1 match, see below
	{ SELECT ?word (GROUP_CONCAT(?form; separator=" ") AS ?forms)
	  WHERE {
		?word nif:nextWord*/conll:WORD ?form.
		FILTER(?form!='*')
		FILTER(?form!='_')
	  } GROUP BY ?word
	}
	FILTER(strstarts(?forms,?form))
};

# n:1 case insensitive matches
INSERT {
	?word conll:LEX_ENTRY ?entry; 
		  conll:LEX_FORM ?canonicalForm; 
		  conll:LEX_SENSE ?sense; 
		  conll:LEX_CONCEPT ?concept.
} WHERE {
	?word conll:WORD ?raw.
	FILTER(NOT EXISTS { ?word conll:LEX_ENTRY [] })
	GRAPH <http://www.w3.org/ns/lemon/ontolex> {
		?entry (ontolex:canonicalForm|ontolex:otherForm|ontolex:lexicalForm)/ontolex:writtenRep ?form.
		FILTER(contains(?form,' '))
		{ 
			?entry ontolex:canonicalForm/ontolex:writtenRep ?canonicalForm 
		} UNION {
			?entry ontolex:lexicalForm/ontolex:writtenRep ?form
			FILTER(NOT EXISTS { ?entry ontolex:canonicalForm [] })
			BIND(?form AS ?canonicalForm)
		}
		?entry ontolex:sense|^ontolex:isSenseOf ?sense.
		OPTIONAL { ?sense ontolex:isLexicalizedSenseOf|^ontolex:lexicalizedSense ?concept.}
	}
	BIND(lcase(?raw) AS ?form)
	FILTER(?raw!=?form)
	FILTER(strstarts(?form,?wform))
	FILTER(?form!=?wform)	# that would be a 1:1 match, see below
	{ SELECT ?word (GROUP_CONCAT(?form; separator=" ") AS ?forms)
	  WHERE {
		?word nif:nextWord*/conll:WORD ?raw.
		BIND(lcase(?raw) AS ?form)
		FILTER(?form!='*')
		FILTER(?form!='_')
	  } GROUP BY ?word
	}
	FILTER(strstarts(?forms,?form))
};

# 1:1 exact matches; note that we may generate more than one object per word
INSERT {
	?word conll:LEX_ENTRY ?entry; 
		  conll:LEX_FORM ?canonicalForm; 
		  conll:LEX_SENSE ?sense; 
		  conll:LEX_CONCEPT ?concept.
} WHERE {
	?word conll:WORD ?form.
	FILTER(NOT EXISTS { ?word conll:WORD ?form. ?word conll:LEX_ENTRY [] })
	GRAPH <http://www.w3.org/ns/lemon/ontolex> {
		?entry (ontolex:canonicalForm|ontolex:otherForm|ontolex:lexicalForm)/ontolex:writtenRep ?form.
		{ 
			?entry ontolex:canonicalForm/ontolex:writtenRep ?canonicalForm 
		} UNION {
			?entry ontolex:lexicalForm/ontolex:writtenRep ?form
			FILTER(NOT EXISTS { ?entry ontolex:canonicalForm [] })
			BIND(?form AS ?canonicalForm)
		}
		?entry ontolex:sense|^ontolex:isSenseOf ?sense.
		OPTIONAL { ?sense ontolex:isLexicalizedSenseOf|^ontolex:lexicalizedSense ?concept.}
	}
};

# 1:1 case insensitive matches
INSERT {
	?word conll:LEX_ENTRY ?entry; 
		  conll:LEX_FORM ?canonicalForm; 
		  conll:LEX_SENSE ?sense; 
		  conll:LEX_CONCEPT ?concept.
} WHERE {
	?word conll:WORD ?raw.
	FILTER(NOT EXISTS{ ?word conll:LEX_ENTRY [] })
	BIND(lcase(?raw) AS ?form)
	FILTER(?form!=?raw)
	GRAPH <http://www.w3.org/ns/lemon/ontolex> {
		?entry (ontolex:canonicalForm|ontolex:otherForm|ontolex:lexicalForm)/ontolex:writtenRep ?form.
		{ 
			?entry ontolex:canonicalForm/ontolex:writtenRep ?canonicalForm 
		} UNION {
			?entry ontolex:lexicalForm/ontolex:writtenRep ?form
			FILTER(NOT EXISTS { ?entry ontolex:canonicalForm [] })
			BIND(?form AS ?canonicalForm)
		}
		?entry ontolex:sense|^ontolex:isSenseOf ?sense.
		OPTIONAL { ?sense ontolex:isLexicalizedSenseOf|^ontolex:lexicalizedSense ?concept.}
	}
};